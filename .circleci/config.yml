version: 2.1
jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk
      - image: jboss/keycloak:7.0.0
        environment:
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: admin
        command:
          - "-Djboss.bind.address=0.0.0.0"
          - "-Djboss.http.port=9999"
      - image: circleci/mongo

    working_directory: ~/course_service

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - run:
          name: "What branch am I on?"
          command: echo ${CIRCLE_BRANCH}

      - checkout

      - setup_remote_docker

      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Wait for keycloak
          command: dockerize -wait http://localhost:9999 -timeout 1m

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Run tests
          command: |
            echo $DOCKER_HOST
            echo $DOCKER_CERT_PATH
            gradle test

      - run: gradle jacocoTestReport

      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

      - run:
          name: Send test coverage to Codacy
          command: |
            #curl -Ls -o codacy-coverage-reporter-assembly.jar $(curl -Ls https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({content_type, browser_download_url} | select(.content_type | contains("java-archive"))) | .[0].browser_download_url')
            #java -jar codacy-coverage-reporter-assembly.jar report -l Java -r build/reports/jacoco/test/jacocoTestReport.xml
            echo "Codacy parsing disabled until it works again"

      - run:
          name: Create ACCESS local tester
          command: gradle customFatJar
      - store_artifacts:
          path: ./build/libs

  push_to_dockerhub:
    docker:
      - image: circleci/openjdk:11-jdk

    working_directory: ~/course_service

    steps:
      - checkout

      - setup_remote_docker

      - run:
          name: Print Docker image name
          command: echo "hoal/$COURSE_SERVICE_IMAGE_NAME:$(echo $CIRCLE_BRANCH | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]')"

      - run:
          name: Build Docker image
          command: docker build -t hoal/$COURSE_SERVICE_IMAGE_NAME:$(echo $CIRCLE_BRANCH | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]') .

      - add_ssh_keys:
          fingerprints:
            - "fe:b1:c8:73:4c:fd:f9:6f:b9:84:56:6a:bc:ad:03:c8"
      - run:
          name: Push Docker image
          command: |
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_USER/$COURSE_SERVICE_IMAGE_NAME:$(echo $CIRCLE_BRANCH | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]')

  deploy:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/course_service

    steps:
      - run:
          name: Deploy app to Digital Ocean Server via Docker
          command: |
            ssh -o StrictHostKeyChecking=no $DIGITAL_OCEAN_USER@$DIGITAL_OCEAN_HOST "cd /root/Infrastructure && sh ./scripts/restart-containers-do.sh"

workflows:
  version: 2
  build-and-deploy-master:
    jobs:
      - build
      - push_to_dockerhub:
          requires:
          - build
      - deploy:
          requires:
            - push_to_dockerhub
          filters:
            branches:
              only: dev
